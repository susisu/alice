#!/usr/bin/env node
/*
 * Alice / al
 * copyright (c) 2015 Susisu
 */

"use strict";

var packageInfo = require("../package.json");

process.title = "al";

var program = require("commander");
program.version(packageInfo.version, "-v, --version");
program.option("-e, --english", "sing in English");
program.option("-s, --speed <value>", "set speed (default = 100)");
program.option("-S, --song <filename>", "load song from file");
program.parse(process.argv);

var aaFilePath = __dirname + "/../data/alice.txt";
var songFilePath =
      program["song"]    ? program["song"]
    : program["english"] ? __dirname + "/../data/song_en.txt"
                         : __dirname + "/../data/song_ja.txt";

var speed = parseFloat(program["speed"]);
if (Number.isNaN(speed) || speed <= 0.0) {
    speed = 100.0;
}

var blessed = require("blessed");
var co      = require("co");
var fs      = require("fs");

/* ignore SIGINT (do not exit) */
process.on("SIGINT", () => {});

var main = co(function* () {
    var aaStr = yield readFile(aaFilePath, { "encoding": "utf-8" });
    var aas   = aaStr.split("#----------------------------------#\n");

    var songStr = yield readFile(songFilePath, { "encoding": "utf-8" });
    var song =
        songStr.trim()
            .split("\n")
            .reduce(
                (arr, line) => {
                    var i = line.indexOf(",");
                    var n = i <= 0 ? 1 : parseInt(line.substr(0, i));
                    if (Number.isNaN(n) || n <= 0) {
                        n = 1;
                    }
                    return arr.concat(new Array(n).fill(line.substr(i + 1)));
                },
                []
            );

    var screen = blessed.screen({
      "smartCSR"   : true,
      "fullUnicode": true
    });

    var rootBox = blessed.box({
        "top"   : "center",
        "left"  : "center",
        "width" : 80,
        "height": 12,
        "tags"  : true
    });
    screen.append(rootBox);

    var aaBox = blessed.box({
        "top"   : 0,
        "left"  : 12,
        "width" : 36,
        "height": 12,
        "tags"  : true
    });
    rootBox.append(aaBox);

    var noteBox1 = blessed.box({
        "top"    : 2,
        "left"   : 2,
        "width"  : 6,
        "height" : 3,
        "tags"   : true,
        "content": "   rï½°;\n __|T\n(__/",
        "hidden" : true
    });
    rootBox.append(noteBox1);

    var noteBox2 = blessed.box({
        "top"    : 9,
        "left"   : 50,
        "width"  : 10,
        "height" : 3,
        "tags"   : true,
        "content": "(\"`)  r\"`)\n|[____|T\nL------]",
        "hidden" : true
    });
    rootBox.append(noteBox2);

    var songBox = blessed.box({
        "top"   : 5,
        "left"  : 48,
        "width" : 32,
        "height": 2,
        "tags"  : true
    });
    rootBox.append(songBox);

    for (var i = 0; i < song.length; i++) {
        if (song[i] === "") {
            aaBox.setContent(aas[0]);
            noteBox1.hidden = true;
            noteBox2.hidden = true;
        }
        else {
            var aaIndex = (i + 1) % aas.length;
            aaBox.setContent(aas[aaIndex]);
            noteBox1.hidden = !(aaIndex == 1 || aaIndex == 2);
            noteBox2.hidden = !(aaIndex == 5 || aaIndex == 6);
        }
        songBox.setContent(song[i]);
        screen.render();
        yield sleep(Math.round(30000 / speed));
    }

    aaBox.setContent(aas[0]);
    noteBox1.hidden = true;
    noteBox2.hidden = true;
    songBox.setContent("");
    screen.render();
    yield sleep(1000);

    process.exit(0);
}).catch(error => {
    console.error(String(error));
    process.exit(1);
});

function sleep(time) {
    return new Promise(resolve => {
        setTimeout(() => resolve(), time);
    });
}

function readFile(filename, option) {
    return new Promise((resolve, reject) => {
        fs.readFile(filename, option, (error, result) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(result);
            }
        });
    });
}
